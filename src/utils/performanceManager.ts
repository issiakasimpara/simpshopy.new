// ‚ö° GESTIONNAIRE DE PERFORMANCE GLOBAL
// Surveille et optimise les performances de l'application

interface PerformanceMetrics {
  queryCount: number;
  totalQueries: number;
  averageQueryTime: number;
  slowQueries: Array<{
    key: string;
    duration: number;
    timestamp: number;
  }>;
  memoryUsage: number;
  renderCount: number;
}

interface PerformanceConfig {
  maxQueriesPerMinute: number;
  slowQueryThreshold: number;
  memoryThreshold: number;
  enableLogging: boolean;
}

class PerformanceManager {
  private metrics: PerformanceMetrics = {
    queryCount: 0,
    totalQueries: 0,
    averageQueryTime: 0,
    slowQueries: [],
    memoryUsage: 0,
    renderCount: 0
  };

  private config: PerformanceConfig = {
    maxQueriesPerMinute: 30, // Limite de 30 requ√™tes par minute
    slowQueryThreshold: 2000, // 2 secondes
    memoryThreshold: 100 * 1024 * 1024, // 100MB
    enableLogging: import.meta.env.DEV
  };

  private queryTimes: Map<string, number> = new Map();
  private lastMinuteQueries: number[] = [];

  /**
   * üìä Enregistrer une nouvelle requ√™te
   */
  trackQuery(queryKey: string, startTime?: number): void {
    const now = Date.now();
    
    // Nettoyer les requ√™tes de plus d'une minute
    this.lastMinuteQueries = this.lastMinuteQueries.filter(
      time => now - time < 60000
    );
    
    this.lastMinuteQueries.push(now);
    this.metrics.queryCount = this.lastMinuteQueries.length;
    this.metrics.totalQueries++;

    if (startTime) {
      const duration = now - startTime;
      this.queryTimes.set(queryKey, duration);
      
      // Calculer la moyenne
      const times = Array.from(this.queryTimes.values());
      this.metrics.averageQueryTime = times.reduce((a, b) => a + b, 0) / times.length;
      
      // D√©tecter les requ√™tes lentes
      if (duration > this.config.slowQueryThreshold) {
        this.metrics.slowQueries.push({
          key: queryKey,
          duration,
          timestamp: now
        });
        
        // Garder seulement les 10 derni√®res requ√™tes lentes
        if (this.metrics.slowQueries.length > 10) {
          this.metrics.slowQueries = this.metrics.slowQueries.slice(-10);
        }
        
        if (this.config.enableLogging) {
          console.warn(`üêå Requ√™te lente d√©tect√©e: ${queryKey} (${duration}ms)`);
        }
      }
    }

    // V√©rifier les limites
    this.checkLimits();
  }

  /**
   * üìä Enregistrer un render
   */
  trackRender(componentName?: string): void {
    this.metrics.renderCount++;
    
    if (this.config.enableLogging && componentName) {
      console.log(`üîÑ Render: ${componentName} (Total: ${this.metrics.renderCount})`);
    }
  }

  /**
   * üìä Mesurer l'utilisation m√©moire
   */
  trackMemory(): void {
    try {
      if ('memory' in performance && (performance as any).memory) {
        // API exp√©rimentale disponible dans Chrome
        this.metrics.memoryUsage = (performance as any).memory.usedJSHeapSize;

        if (this.metrics.memoryUsage > this.config.memoryThreshold) {
          if (this.config.enableLogging) {
            console.warn(`üß† Utilisation m√©moire √©lev√©e: ${Math.round(this.metrics.memoryUsage / 1024 / 1024)}MB`);
          }
        }
      } else {
        // Fallback pour les navigateurs sans support
        this.metrics.memoryUsage = 0;
      }
    } catch (error) {
      // Silencieux en cas d'erreur
      this.metrics.memoryUsage = 0;
    }
  }

  /**
   * ‚ö†Ô∏è V√©rifier les limites de performance
   */
  private checkLimits(): void {
    // Trop de requ√™tes par minute
    if (this.metrics.queryCount > this.config.maxQueriesPerMinute) {
      if (this.config.enableLogging) {
        console.error(`üö® ALERTE: Trop de requ√™tes (${this.metrics.queryCount}/min)`);
        console.log('üí° Suggestion: Augmenter staleTime et r√©duire refetchInterval');
      }
    }

    // Trop de requ√™tes lentes
    const recentSlowQueries = this.metrics.slowQueries.filter(
      q => Date.now() - q.timestamp < 60000
    );
    
    if (recentSlowQueries.length > 3) {
      if (this.config.enableLogging) {
        console.error(`üö® ALERTE: ${recentSlowQueries.length} requ√™tes lentes dans la derni√®re minute`);
        console.log('üí° Suggestion: Optimiser les requ√™tes ou ajouter des index');
      }
    }
  }

  /**
   * üìä Obtenir les m√©triques actuelles
   */
  getMetrics(): PerformanceMetrics {
    this.trackMemory();
    return { ...this.metrics };
  }

  /**
   * üìä Obtenir un rapport de performance
   */
  getReport(): string {
    const metrics = this.getMetrics();
    
    return `
üöÄ RAPPORT DE PERFORMANCE
========================
üìä Requ√™tes/minute: ${metrics.queryCount}/${this.config.maxQueriesPerMinute}
‚è±Ô∏è  Temps moyen: ${Math.round(metrics.averageQueryTime)}ms
üêå Requ√™tes lentes: ${metrics.slowQueries.length}
üß† M√©moire: ${Math.round(metrics.memoryUsage / 1024 / 1024)}MB
üîÑ Renders: ${metrics.renderCount}

${metrics.slowQueries.length > 0 ? `
üêå REQU√äTES LENTES R√âCENTES:
${metrics.slowQueries.slice(-3).map(q => 
  `- ${q.key}: ${q.duration}ms`
).join('\n')}
` : '‚úÖ Aucune requ√™te lente r√©cente'}

üí° RECOMMANDATIONS:
${this.getRecommendations().join('\n')}
    `.trim();
  }

  /**
   * üí° Obtenir des recommandations d'optimisation
   */
  private getRecommendations(): string[] {
    const recommendations: string[] = [];
    const metrics = this.getMetrics();

    if (metrics.queryCount > this.config.maxQueriesPerMinute * 0.8) {
      recommendations.push('- Augmenter staleTime pour r√©duire les requ√™tes');
      recommendations.push('- D√©sactiver refetchOnWindowFocus sur les donn√©es non critiques');
    }

    if (metrics.averageQueryTime > 1000) {
      recommendations.push('- Optimiser les requ√™tes Supabase avec des index');
      recommendations.push('- R√©duire la quantit√© de donn√©es r√©cup√©r√©es');
    }

    if (metrics.slowQueries.length > 2) {
      recommendations.push('- Identifier et optimiser les requ√™tes les plus lentes');
      recommendations.push('- Consid√©rer la pagination pour les grandes listes');
    }

    if (metrics.memoryUsage > this.config.memoryThreshold * 0.8) {
      recommendations.push('- Nettoyer les caches inutilis√©s');
      recommendations.push('- Impl√©menter le lazy loading pour les composants');
    }

    if (recommendations.length === 0) {
      recommendations.push('‚úÖ Performance optimale !');
    }

    return recommendations;
  }

  /**
   * üßπ Nettoyer les m√©triques anciennes
   */
  cleanup(): void {
    const now = Date.now();
    
    // Nettoyer les requ√™tes lentes de plus de 5 minutes
    this.metrics.slowQueries = this.metrics.slowQueries.filter(
      q => now - q.timestamp < 5 * 60 * 1000
    );
    
    // Nettoyer les temps de requ√™te anciens
    if (this.queryTimes.size > 100) {
      const entries = Array.from(this.queryTimes.entries());
      this.queryTimes = new Map(entries.slice(-50));
    }
  }

  /**
   * üìä Logger le rapport p√©riodiquement
   */
  startPeriodicReporting(intervalMs: number = 60000): () => void {
    if (!this.config.enableLogging) return () => {};
    
    const interval = setInterval(() => {
      // Log seulement en d√©veloppement et tr√®s rarement
      if (import.meta.env.DEV && Math.random() < 0.05) { // 5% de chance de log
        console.group('‚ö° PERFORMANCE REPORT');
        console.log(this.getReport());
        console.groupEnd();
      }
      this.cleanup();
    }, intervalMs);

    return () => clearInterval(interval);
  }
}

// Instance globale
export const performanceManager = new PerformanceManager();

/**
 * üéØ Hook pour tracker les performances d'un composant
 */
export const usePerformanceTracker = (componentName: string) => {
  const startTime = Date.now();
  
  // Track render
  performanceManager.trackRender(componentName);
  
  return {
    trackQuery: (queryKey: string) => {
      performanceManager.trackQuery(queryKey, startTime);
    },
    getMetrics: () => performanceManager.getMetrics(),
    getReport: () => performanceManager.getReport()
  };
};
