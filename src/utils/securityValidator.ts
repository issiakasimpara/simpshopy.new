// üîê VALIDATEUR DE S√âCURIT√â
// V√©rifie que l'application respecte les bonnes pratiques de s√©curit√©

interface SecurityCheck {
  name: string;
  status: 'PASS' | 'FAIL' | 'WARNING';
  message: string;
  critical: boolean;
}

interface SecurityReport {
  overall: 'SECURE' | 'VULNERABLE' | 'CRITICAL';
  score: number;
  checks: SecurityCheck[];
  recommendations: string[];
}

/**
 * üîç Validation compl√®te de la s√©curit√©
 */
export const validateSecurity = (): SecurityReport => {
  const checks: SecurityCheck[] = [];
  const recommendations: string[] = [];

  // 1. V√©rifier les variables d'environnement
  checks.push(checkEnvironmentVariables());
  
  // 2. V√©rifier l'absence de cl√©s hardcod√©es
  checks.push(checkHardcodedSecrets());
  
  // 3. V√©rifier la configuration Supabase
  checks.push(checkSupabaseConfig());
  
  // 4. V√©rifier HTTPS
  checks.push(checkHTTPS());
  
  // 5. V√©rifier les headers de s√©curit√©
  checks.push(checkSecurityHeaders());

  // Calculer le score
  const totalChecks = checks.length;
  const passedChecks = checks.filter(c => c.status === 'PASS').length;
  const criticalFailures = checks.filter(c => c.status === 'FAIL' && c.critical).length;
  
  const score = Math.round((passedChecks / totalChecks) * 100);
  
  // D√©terminer le statut global
  let overall: 'SECURE' | 'VULNERABLE' | 'CRITICAL';
  if (criticalFailures > 0) {
    overall = 'CRITICAL';
    recommendations.push('üö® URGENT: Corriger imm√©diatement les failles critiques');
  } else if (score < 70) {
    overall = 'VULNERABLE';
    recommendations.push('‚ö†Ô∏è Am√©liorer la s√©curit√© avant la production');
  } else {
    overall = 'SECURE';
    recommendations.push('‚úÖ S√©curit√© acceptable, continuer la surveillance');
  }

  // Ajouter des recommandations sp√©cifiques
  if (checks.some(c => c.name.includes('Environment') && c.status === 'FAIL')) {
    recommendations.push('üìù Configurer correctement les variables d\'environnement');
  }
  
  if (checks.some(c => c.name.includes('HTTPS') && c.status === 'FAIL')) {
    recommendations.push('üîí Activer HTTPS en production');
  }

  return {
    overall,
    score,
    checks,
    recommendations
  };
};

/**
 * üîç V√©rifier les variables d'environnement
 */
const checkEnvironmentVariables = (): SecurityCheck => {
  const requiredVars = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];
  const missingVars = requiredVars.filter(varName => !import.meta.env[varName]);
  
  if (missingVars.length > 0) {
    return {
      name: 'Environment Variables',
      status: 'FAIL',
      message: `Variables manquantes: ${missingVars.join(', ')}`,
      critical: true
    };
  }
  
  return {
    name: 'Environment Variables',
    status: 'PASS',
    message: 'Toutes les variables d\'environnement sont pr√©sentes',
    critical: false
  };
};

/**
 * üîç V√©rifier l'absence de cl√©s hardcod√©es
 */
const checkHardcodedSecrets = (): SecurityCheck => {
  // Cette v√©rification est symbolique - en r√©alit√©, elle devrait √™tre faite par un linter
  const codeContent = document.documentElement.innerHTML;
  
  // Patterns dangereux
  const dangerousPatterns = [
    /sk_live_[a-zA-Z0-9]+/, // Stripe live keys
    /pk_live_[a-zA-Z0-9]+/, // Stripe public live keys
    /AKIA[0-9A-Z]{16}/, // AWS Access Keys
    /[0-9a-f]{32}/, // Potential API keys (32 hex chars)
  ];
  
  const foundPatterns = dangerousPatterns.some(pattern => pattern.test(codeContent));
  
  if (foundPatterns) {
    return {
      name: 'Hardcoded Secrets',
      status: 'FAIL',
      message: 'Cl√©s potentiellement expos√©es d√©tect√©es dans le code',
      critical: true
    };
  }
  
  return {
    name: 'Hardcoded Secrets',
    status: 'PASS',
    message: 'Aucune cl√© hardcod√©e d√©tect√©e',
    critical: false
  };
};

/**
 * üîç V√©rifier la configuration Supabase
 */
const checkSupabaseConfig = (): SecurityCheck => {
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  
  if (!supabaseUrl?.startsWith('https://')) {
    return {
      name: 'Supabase Config',
      status: 'FAIL',
      message: 'URL Supabase doit utiliser HTTPS',
      critical: true
    };
  }
  
  if (!supabaseUrl?.includes('.supabase.co')) {
    return {
      name: 'Supabase Config',
      status: 'WARNING',
      message: 'URL Supabase non standard d√©tect√©e',
      critical: false
    };
  }
  
  return {
    name: 'Supabase Config',
    status: 'PASS',
    message: 'Configuration Supabase s√©curis√©e',
    critical: false
  };
};

/**
 * üîç V√©rifier HTTPS
 */
const checkHTTPS = (): SecurityCheck => {
  const isHTTPS = window.location.protocol === 'https:';
  const isLocalhost = window.location.hostname === 'localhost';
  
  if (!isHTTPS && !isLocalhost) {
    return {
      name: 'HTTPS',
      status: 'FAIL',
      message: 'HTTPS requis en production',
      critical: true
    };
  }
  
  return {
    name: 'HTTPS',
    status: 'PASS',
    message: isLocalhost ? 'Localhost (HTTPS non requis)' : 'HTTPS activ√©',
    critical: false
  };
};

/**
 * üîç V√©rifier les headers de s√©curit√©
 */
const checkSecurityHeaders = (): SecurityCheck => {
  // Cette v√©rification n√©cessiterait une requ√™te r√©seau pour √™tre compl√®te
  // Pour l'instant, on fait une v√©rification basique
  
  return {
    name: 'Security Headers',
    status: 'WARNING',
    message: 'V√©rification des headers de s√©curit√© recommand√©e',
    critical: false
  };
};

/**
 * üîç Afficher le rapport de s√©curit√© dans la console
 */
export const logSecurityReport = (): void => {
  // Log seulement en d√©veloppement et tr√®s rarement pour √©viter la pollution
  if (import.meta.env.DEV && Math.random() < 0.01) { // 1% de chance de log
    const report = validateSecurity();
    
    console.group('üîê RAPPORT DE S√âCURIT√â');
    console.log(`üìä Score: ${report.score}/100`);
    console.log(`üéØ Statut: ${report.overall}`);
    
    console.group('üìã V√©rifications:');
    report.checks.forEach(check => {
      const icon = check.status === 'PASS' ? '‚úÖ' : check.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`${icon} ${check.name}: ${check.message}`);
    });
    console.groupEnd();
    
    if (report.recommendations.length > 0) {
      console.group('üí° Recommandations:');
      report.recommendations.forEach(rec => console.log(rec));
      console.groupEnd();
    }
    
    console.groupEnd();
  }
};
