// Service s√©curis√© pour la conversion de devises via Edge Function Supabase
// La cl√© API Fixer.io est cach√©e c√¥t√© serveur

import { supabase } from '@/integrations/supabase/client';

export interface ConversionResult {
  originalAmount: number;
  originalCurrency: string;
  convertedAmount: number;
  targetCurrency: string;
  rate: number;
  timestamp: string;
}

export class SecureCurrencyService {
  /**
   * Convertit un montant d'une devise vers une autre via Edge Function
   */
  static async convertCurrency(
    amount: number,
    fromCurrency: string,
    toCurrency: string
  ): Promise<ConversionResult | null> {
    try {
      console.log(`üîÑ Conversion s√©curis√©e: ${amount} ${fromCurrency} ‚Üí ${toCurrency}`);

      const { data, error } = await supabase.functions.invoke('currency-converter', {
        body: {
          action: 'convert',
          fromCurrency,
          toCurrency,
          amount
        }
      });

      if (error) {
        console.error('‚ùå Erreur Edge Function:', error);
        return null;
      }

      if (data.success && data.result) {
        console.log('‚úÖ Conversion r√©ussie via Edge Function');
        return data.result;
      }

      console.error('‚ùå Erreur de conversion:', data.error);
      return null;

    } catch (error) {
      console.error('‚ùå Erreur lors de la conversion s√©curis√©e:', error);
      return null;
    }
  }

  /**
   * Obtient le taux de change entre deux devises via Edge Function
   */
  static async getExchangeRate(
    fromCurrency: string,
    toCurrency: string
  ): Promise<number | null> {
    try {
      console.log(`üìä Taux de change s√©curis√©: ${fromCurrency} ‚Üí ${toCurrency}`);

      const { data, error } = await supabase.functions.invoke('currency-converter', {
        body: {
          action: 'getRate',
          fromCurrency,
          toCurrency
        }
      });

      if (error) {
        console.error('‚ùå Erreur Edge Function:', error);
        return null;
      }

      if (data.success && data.rate !== undefined) {
        console.log('‚úÖ Taux r√©cup√©r√© via Edge Function');
        return data.rate;
      }

      console.error('‚ùå Erreur de r√©cup√©ration du taux:', data.error);
      return null;

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du taux s√©curis√©:', error);
      return null;
    }
  }

  /**
   * Met √† jour automatiquement les montants dans la base de donn√©es lors d'un changement de devise
   */
  static async updateStoreAmounts(
    storeId: string,
    oldCurrency: string,
    newCurrency: string
  ): Promise<boolean> {
    try {
      console.log(`üîÑ Mise √† jour s√©curis√©e des montants du store ${storeId}: ${oldCurrency} ‚Üí ${newCurrency}`);

      // Obtenir le taux de conversion via Edge Function
      const rate = await this.getExchangeRate(oldCurrency, newCurrency);
      if (!rate) {
        console.error('‚ùå Impossible d\'obtenir le taux de conversion s√©curis√©');
        return false;
      }

      console.log(`üìä Taux de conversion s√©curis√©: ${rate}`);

      // Mettre √† jour les prix des produits
      const { data: products, error: productsFetchError } = await supabase
        .from('products')
        .select('id, price')
        .eq('store_id', storeId);

      if (productsFetchError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des produits:', productsFetchError);
      } else if (products && products.length > 0) {
        // Mettre √† jour chaque produit individuellement
        for (const product of products) {
          const newPrice = product.price * rate;
          const { error: updateError } = await supabase
            .from('products')
            .update({ price: newPrice })
            .eq('id', product.id);

          if (updateError) {
            console.error(`‚ùå Erreur lors de la mise √† jour du produit ${product.id}:`, updateError);
          }
        }
        console.log(`‚úÖ Prix de ${products.length} produits mis √† jour`);
      }

      // Mettre √† jour les montants des commandes
      const { data: orders, error: ordersFetchError } = await supabase
        .from('public_orders')
        .select('id, total_amount')
        .eq('store_id', storeId);

      if (ordersFetchError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des commandes:', ordersFetchError);
      } else if (orders && orders.length > 0) {
        // Mettre √† jour chaque commande individuellement
        for (const order of orders) {
          const newAmount = order.total_amount * rate;
          const { error: updateError } = await supabase
            .from('public_orders')
            .update({ total_amount: newAmount })
            .eq('id', order.id);

          if (updateError) {
            console.error(`‚ùå Erreur lors de la mise √† jour de la commande ${order.id}:`, updateError);
          }
        }
        console.log(`‚úÖ Montants de ${orders.length} commandes mis √† jour`);
      }

      // Mettre √† jour les montants des paiements
      const { data: payments, error: paymentsFetchError } = await supabase
        .from('payments')
        .select('id, amount')
        .eq('store_id', storeId);

      if (paymentsFetchError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des paiements:', paymentsFetchError);
      } else if (payments && payments.length > 0) {
        // Mettre √† jour chaque paiement individuellement
        for (const payment of payments) {
          const newAmount = payment.amount * rate;
          const { error: updateError } = await supabase
            .from('payments')
            .update({ amount: newAmount })
            .eq('id', payment.id);

          if (updateError) {
            console.error(`‚ùå Erreur lors de la mise √† jour du paiement ${payment.id}:`, updateError);
          }
        }
        console.log(`‚úÖ Montants de ${payments.length} paiements mis √† jour`);
      }

      console.log('‚úÖ Mise √† jour s√©curis√©e des montants termin√©e');
      return true;

    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour s√©curis√©e des montants:', error);
      return false;
    }
  }

  /**
   * Teste la connexion √† l'API Fixer.io via Edge Function
   */
  static async testConnection(): Promise<boolean> {
    try {
      console.log('üß™ Test de connexion s√©curis√© √† Fixer.io...');

      const { data, error } = await supabase.functions.invoke('currency-converter', {
        body: {
          action: 'testConnection'
        }
      });

      if (error) {
        console.error('‚ùå Erreur Edge Function:', error);
        return false;
      }

      if (data.success) {
        console.log('‚úÖ Connexion s√©curis√©e √† Fixer.io r√©ussie');
        return true;
      } else {
        console.error('‚ùå Erreur de connexion s√©curis√©e:', data.error);
        return false;
      }

    } catch (error) {
      console.error('‚ùå Erreur de connexion s√©curis√©e:', error);
      return false;
    }
  }
}
