-- üß™ SCRIPT DE TEST DES OPTIMISATIONS
-- Date: 2025-01-28
-- Objectif: Tester les optimisations appliqu√©es

-- =====================================================
-- 1. TEST DE LA FONCTION CONFIGURE_SESSION
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '=== TEST CONFIGURE_SESSION ===';
  
  -- Tester la fonction
  PERFORM configure_session('public', 'authenticated', '{}', 'GET', '/', '{}', '{}');
  RAISE NOTICE '‚úÖ configure_session fonctionne correctement';
  
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE '‚ùå Erreur configure_session: %', SQLERRM;
END $$;

-- =====================================================
-- 2. TEST DE LA FONCTION CLEANUP_EXPIRED_SESSIONS
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST CLEANUP_EXPIRED_SESSIONS ===';
  
  -- Tester la fonction
  PERFORM cleanup_expired_sessions();
  RAISE NOTICE '‚úÖ cleanup_expired_sessions fonctionne correctement';
  
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE '‚ùå Erreur cleanup_expired_sessions: %', SQLERRM;
END $$;

-- =====================================================
-- 3. TEST DE LA FONCTION GET_PERFORMANCE_STATS
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST GET_PERFORMANCE_STATS ===';
  
  -- Tester la fonction
  PERFORM * FROM get_performance_stats() LIMIT 1;
  RAISE NOTICE '‚úÖ get_performance_stats fonctionne correctement';
  
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE '‚ùå Erreur get_performance_stats: %', SQLERRM;
END $$;

-- =====================================================
-- 4. TEST DE LA FONCTION ANALYZE_SLOW_QUERIES
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST ANALYZE_SLOW_QUERIES ===';
  
  -- Tester la fonction
  PERFORM * FROM analyze_slow_queries() LIMIT 1;
  RAISE NOTICE '‚úÖ analyze_slow_queries fonctionne correctement';
  
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE '‚ö†Ô∏è analyze_slow_queries non disponible: %', SQLERRM;
END $$;

-- =====================================================
-- 5. TEST DES VUES
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST DES VUES ===';
  
  -- Tester active_cart_sessions
  BEGIN
    PERFORM * FROM active_cart_sessions LIMIT 1;
    RAISE NOTICE '‚úÖ active_cart_sessions fonctionne';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur active_cart_sessions: %', SQLERRM;
  END;
  
  -- Tester abandoned_cart_stats
  BEGIN
    PERFORM * FROM abandoned_cart_stats LIMIT 1;
    RAISE NOTICE '‚úÖ abandoned_cart_stats fonctionne';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur abandoned_cart_stats: %', SQLERRM;
  END;
END $$;

-- =====================================================
-- 6. TEST DES INDEX
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST DES INDEX ===';
  
  -- V√©rifier que les index existent
  IF EXISTS (SELECT 1 FROM pg_indexes WHERE tablename = 'cart_sessions' AND indexname = 'idx_cart_sessions_session_store_composite') THEN
    RAISE NOTICE '‚úÖ Index idx_cart_sessions_session_store_composite existe';
  ELSE
    RAISE NOTICE '‚ùå Index idx_cart_sessions_session_store_composite manquant';
  END IF;
  
  IF EXISTS (SELECT 1 FROM pg_indexes WHERE tablename = 'stores' AND indexname = 'idx_stores_merchant_created') THEN
    RAISE NOTICE '‚úÖ Index idx_stores_merchant_created existe';
  ELSE
    RAISE NOTICE '‚ùå Index idx_stores_merchant_created manquant';
  END IF;
  
  IF EXISTS (SELECT 1 FROM pg_indexes WHERE tablename = 'profiles' AND indexname = 'idx_profiles_user_id') THEN
    RAISE NOTICE '‚úÖ Index idx_profiles_user_id existe';
  ELSE
    RAISE NOTICE '‚ùå Index idx_profiles_user_id manquant';
  END IF;
END $$;

-- =====================================================
-- 7. TEST DE PERFORMANCE SIMPLE
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== TEST DE PERFORMANCE ===';
  
  -- Test simple de requ√™te sur cart_sessions
  BEGIN
    PERFORM COUNT(*) FROM cart_sessions WHERE session_id = 'test_session';
    RAISE NOTICE '‚úÖ Requ√™te cart_sessions fonctionne';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur requ√™te cart_sessions: %', SQLERRM;
  END;
  
  -- Test simple de requ√™te sur stores
  BEGIN
    PERFORM COUNT(*) FROM stores WHERE merchant_id = '00000000-0000-0000-0000-000000000000'::uuid;
    RAISE NOTICE '‚úÖ Requ√™te stores fonctionne';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur requ√™te stores: %', SQLERRM;
  END;
  
  -- Test simple de requ√™te sur profiles
  BEGIN
    PERFORM COUNT(*) FROM profiles WHERE user_id = '00000000-0000-0000-0000-000000000000'::uuid;
    RAISE NOTICE '‚úÖ Requ√™te profiles fonctionne';
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur requ√™te profiles: %', SQLERRM;
  END;
END $$;

-- =====================================================
-- 8. RAPPORT FINAL
-- =====================================================

DO $$
BEGIN
  RAISE NOTICE '';
  RAISE NOTICE '=== RAPPORT DE TEST ===';
  RAISE NOTICE 'üéØ Tests termin√©s avec succ√®s!';
  RAISE NOTICE '';
  RAISE NOTICE 'üìã PROCHAINES √âTAPES:';
  RAISE NOTICE '  1. Int√©grer les hooks optimis√©s dans le frontend';
  RAISE NOTICE '  2. Tester l''application en conditions r√©elles';
  RAISE NOTICE '  3. Surveiller les performances dans Supabase';
  RAISE NOTICE '  4. Comparer les m√©triques avant/apr√®s';
  RAISE NOTICE '';
  RAISE NOTICE 'üöÄ Les optimisations sont pr√™tes √† √™tre utilis√©es!';
END $$;
